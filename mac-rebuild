#!/bin/bash

# Mac Rebuild - Intelligent Mac development environment backup and restore tool
# Version: 2.1.0

set -e

VERSION="2.1.0"

# Determine library directory based on installation method
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ "$SCRIPT_DIR" == */usr/local/bin* ]] || [[ "$SCRIPT_DIR" == */opt/homebrew/bin* ]]; then
    # Homebrew installation - check multiple possible locations
    if [[ -d "$(dirname "$SCRIPT_DIR")/libexec/mac-rebuild/lib/mac-rebuild" ]]; then
        LIB_DIR="$(dirname "$SCRIPT_DIR")/libexec/mac-rebuild/lib/mac-rebuild"
    elif [[ -d "$(dirname "$SCRIPT_DIR")/Cellar/mac-rebuild" ]]; then
        # Find the actual version directory in Cellar
        LIB_DIR=$(find "$(dirname "$SCRIPT_DIR")/Cellar/mac-rebuild" -name "libexec" -type d | head -1)
        if [[ -n "$LIB_DIR" ]]; then
            LIB_DIR="$LIB_DIR/lib/mac-rebuild"
        else
            LIB_DIR="$(dirname "$SCRIPT_DIR")/lib/mac-rebuild"
        fi
    else
        # Fallback for older Homebrew layout
        LIB_DIR="$(dirname "$SCRIPT_DIR")/lib/mac-rebuild"
    fi
else
    # Development or manual installation
    LIB_DIR="$(cd "$SCRIPT_DIR/lib/mac-rebuild" && pwd)"
fi

# Verify library directory exists
if [[ ! -d "$LIB_DIR" ]]; then
    echo "Error: Library directory not found at $LIB_DIR"
    echo "Please ensure mac-rebuild is properly installed."
    exit 1
fi

WORK_DIR="$HOME/.mac-rebuild"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
log() {
    echo -e "${GREEN}üìã $1${NC}"
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Function to ask yes/no question
ask_yes_no() {
    local question="$1"
    local default="${2:-n}"
    local response

    if [[ "$default" == "y" ]]; then
        echo -n "$question [Y/n]: "
    else
        echo -n "$question [y/N]: "
    fi

    read -r response
    response=${response:-$default}
    [[ "$response" =~ ^[Yy]$ ]]
}

# Function to show usage
show_usage() {
    cat << EOF
Mac Rebuild v${VERSION} - Intelligent Mac development environment backup and restore

USAGE:
    mac-rebuild <command> [options]

COMMANDS:
    backup                  Create an interactive backup of your current system
    restore <source>        Restore from a backup source (see RESTORE SOURCES below)
    create-bootstrap        Create a bootstrap package for fresh installs
    status                  Show current backup status
    plugins                 List available plugins and their status
    purge                   Delete all local backup files to start fresh
    --version              Show version information
    --help                 Show this help message

RESTORE SOURCES:
    <path>                 Local directory or mounted drive path

ARCHITECTURE:
    Mac Rebuild v2.0 uses a modular plugin-based architecture that provides:
    - Easy extensibility with plugins
    - Selective component backup/restore
    - Better error isolation and recovery
    - Enhanced ASDF support with system dependencies
    - Intelligent application detection and restoration

EXAMPLES:
    # Create backup
    mac-rebuild backup

    # Restore from iCloud Drive (recommended)
    mac-rebuild restore ~/Library/Mobile\ Documents/com~apple~CloudDocs/mac-backup

    # List available plugins
    mac-rebuild plugins

    # Clear all backup files
    mac-rebuild purge

FRESH INSTALL WORKFLOWS:

Option A - iCloud Drive (Recommended ‚≠ê):
    1. Install Homebrew
    2. brew install mac-rebuild
    3. mac-rebuild restore ~/Library/Mobile\ Documents/com~apple~CloudDocs/mac-backup

Option B - Other Cloud Storage:
    1. Install Homebrew
    2. brew install mac-rebuild
    3. mac-rebuild restore /path/to/backup

For more information, visit: https://github.com/jtanium/mac-rebuild
EOF
}

# Function to list available plugins
list_plugins() {
    if [[ ! -f "$LIB_DIR/plugin-system.sh" ]]; then
        error "Plugin system not available. Please update mac-rebuild."
        return 1
    fi

    # Load plugin system
    SCRIPT_DIR="$LIB_DIR"
    BACKUP_DIR="$WORK_DIR/backup"
    source "$LIB_DIR/config.sh"
    source "$LIB_DIR/plugin-system.sh"

    init_plugin_system

    echo ""
    info "Available Mac Rebuild Plugins:"
    echo ""

    for plugin_name in $(get_all_plugins); do
        local status="enabled"
        if ! is_plugin_enabled "$plugin_name"; then
            status="disabled"
        fi
        local description=$(get_plugin_description "$plugin_name")
        local priority=$(get_plugin_priority "$plugin_name")

        echo "  üì¶ $plugin_name (priority: $priority) [$status]"
        echo "     $description"
        echo ""
    done
}

# Function to setup from local directory
setup_backup_local() {
    local source_dir="$1"

    mkdir -p "$WORK_DIR/backup"

    log "Copying backup from local source..."
    cp -r "$source_dir"/* "$WORK_DIR/backup/" 2>/dev/null || {
        error "Failed to copy from: $source_dir"
        return 1
    }

    return 0
}

# Function to check Time Machine backup status
check_time_machine_backup() {
    echo ""
    error "üõ°Ô∏è  IMPORTANT SAFETY CHECK"
    echo ""
    warn "Before using Mac Rebuild, you MUST have a Time Machine backup!"
    echo ""
    echo "Time Machine protects you from:"
    echo "‚Ä¢ Complete data loss if something goes wrong"
    echo "‚Ä¢ Accidental file overwrites during restore"
    echo "‚Ä¢ System corruption or hardware failure"
    echo ""

    # Check if Time Machine is configured
    local tm_status=$(tmutil status 2>/dev/null | grep "Running" || echo "Not running")
    local tm_destinations=$(tmutil destinationinfo 2>/dev/null | grep "Name" | wc -l || echo "0")

    if [[ "$tm_destinations" -gt 0 ]]; then
        info "‚úÖ Time Machine destinations found: $tm_destinations"
        tmutil destinationinfo 2>/dev/null | grep -E "(Name|Mount Point)" | head -6
    else
        warn "‚ùå No Time Machine destinations configured"
    fi

    echo ""
    echo "To set up Time Machine:"
    echo "1. Connect external drive (USB, Thunderbolt, or network)"
    echo "2. System Settings ‚Üí General ‚Üí Time Machine ‚Üí Add Backup Disk"
    echo "3. Wait for initial backup to complete (may take hours)"
    echo "4. Verify backup completed successfully"
    echo ""

    while true; do
        read -p "Have you created a complete Time Machine backup? (yes/no): " response
        case $response in
            [Yy]es|[Yy])
                log "‚úÖ Time Machine backup confirmed. Proceeding..."
                break
                ;;
            [Nn]o|[Nn])
                error "‚ùå Please create a Time Machine backup first!"
                echo ""
                echo "Mac Rebuild will not run without a Time Machine backup."
                echo "This protects you from potential data loss."
                echo ""
                echo "After creating your backup, run this command again."
                exit 1
                ;;
            *)
                warn "Please answer 'yes' or 'no'"
                ;;
        esac
    done
    echo ""
}

# Function to show data loss disclaimer
show_safety_disclaimer() {
    echo ""
    warn "üö® DATA LOSS RISK DISCLAIMER"
    echo ""
    echo "Mac Rebuild is provided \"AS IS\" without warranty."
    echo "While designed to be safe:"
    echo ""
    echo "‚Ä¢ YOU are responsible for backing up your data"
    echo "‚Ä¢ Restoration operations can overwrite existing files"
    echo "‚Ä¢ Always test on a non-critical machine first"
    echo "‚Ä¢ Time Machine is your safety net for full recovery"
    echo ""
    echo "By continuing, you acknowledge:"
    echo "‚Ä¢ You have created a complete Time Machine backup"
    echo "‚Ä¢ You understand the risk of data loss"
    echo "‚Ä¢ You accept full responsibility for any data loss"
    echo "‚Ä¢ You will not hold the authors liable for damages"
    echo ""

    read -p "Do you understand and accept these risks? (yes/no): " response
    case $response in
        [Yy]es|[Yy])
            log "‚úÖ Risk acknowledgment confirmed."
            ;;
        *)
            error "‚ùå Risk acknowledgment required to proceed."
            exit 1
            ;;
    esac
    echo ""
}

# Function to detect storage options and recommend approach
recommend_storage_approach() {
    echo ""
    info "üîê Storage Options for Your Backup:"
    echo ""
    echo "1. üì± iCloud Drive (Recommended ‚≠ê - Already authenticated!)"
    echo "   - Store in: ~/Library/Mobile Documents/com~apple~CloudDocs/"
    echo "   - Pros: Auto-sync, already authenticated, secure, works immediately"
    echo "   - Cons: Requires iCloud storage space"
    echo ""
    echo "2. üìÇ Other Cloud Storage"
    echo "   - Store in: Dropbox, Google Drive, USB drive"
    echo "   - Pros: Secure, works immediately after fresh install"
    echo "   - Cons: Need to manually sync/carry storage"
    echo ""
}

# Function to create backup with storage options
cmd_backup() {
    # Always check for Time Machine backup before creating new backup
    check_time_machine_backup
    show_safety_disclaimer

    recommend_storage_approach

    echo -n "Choose storage approach [1-2]: "
    read -r storage_choice

    case "$storage_choice" in
        1)
            # iCloud Drive storage
            log "Setting up iCloud Drive backup..."
            local icloud_path="$HOME/Library/Mobile Documents/com~apple~CloudDocs/mac-backup"

            # Check if iCloud Drive is available
            if [[ ! -d "$HOME/Library/Mobile Documents/com~apple~CloudDocs" ]]; then
                error "iCloud Drive not found. Please enable iCloud Drive in System Preferences."
                info "Alternative: Choose option 2 for other cloud storage"
                return 1
            fi

            mkdir -p "$icloud_path"
            SCRIPT_DIR="$LIB_DIR" BACKUP_DIR="$icloud_path" "$LIB_DIR/backup_modular.sh"

            echo ""
            log "‚úÖ Backup stored in iCloud Drive!"
            info "üìÅ Location: $icloud_path"
            info "üîÑ iCloud will sync this across all your devices"
            info "üì± After fresh install, restore with:"
            echo "    mac-rebuild restore ~/Library/Mobile\\ Documents/com~apple~CloudDocs/mac-backup"
            ;;
        2)
            # Other cloud storage
            log "Setting up other cloud storage backup..."
            echo -n "Enter backup directory path (e.g., ~/Dropbox/mac-backup): "
            read -r backup_path
            backup_path="${backup_path/#\~/$HOME}"  # Expand tilde
            mkdir -p "$backup_path"

            SCRIPT_DIR="$LIB_DIR" BACKUP_DIR="$backup_path" "$LIB_DIR/backup_modular.sh"

            info "Backup stored at: $backup_path"
            info "Copy this folder to your cloud storage or USB drive"
            ;;
        *)
            error "Invalid choice. Please run mac-rebuild backup again."
            return 1
            ;;
    esac
}

# Function to handle restore from various sources
cmd_restore() {
    local source="$1"

    if [[ -z "$source" ]]; then
        error "Source is required for restore"
        echo "Usage: mac-rebuild restore <source>"
        echo "Sources: <local-path>"
        return 1
    fi

    # Always check for Time Machine backup before restoring (most risky operation)
    check_time_machine_backup
    show_safety_disclaimer

    # Determine source type and handle accordingly
    if [[ -d "$source" ]]; then
        log "Restoring from local directory..."
        setup_backup_local "$source"
    else
        error "Invalid source: $source"
        info "Use: <local-path>"
        return 1
    fi

    # Always use modular system
    SCRIPT_DIR="$LIB_DIR" BACKUP_DIR="$WORK_DIR/backup" "$LIB_DIR/restore_modular.sh"
}

# Function to show status
cmd_status() {
    if [[ -f "$WORK_DIR/backup/backup_summary.txt" ]]; then
        echo ""
        log "Last backup summary:"
        cat "$WORK_DIR/backup/backup_summary.txt"
    else
        warn "No backup found locally"
    fi

    recommend_storage_approach
}

# Function to purge backup files
cmd_purge() {
    echo ""
    log "Mac Rebuild - Purge Backup Files"
    echo ""

    # Define common backup locations
    local backup_locations=(
        "$HOME/.mac-rebuild"
        "$HOME/Library/Mobile Documents/com~apple~CloudDocs/mac-backup"
        "$HOME/Dropbox/mac-backup"
        "$HOME/Google Drive/mac-backup"
        "$HOME/OneDrive/mac-backup"
    )

    # Find existing backup locations
    local found_locations=()
    local total_size=0

    echo "üîç Scanning for mac-rebuild backup files..."
    echo ""

    for location in "${backup_locations[@]}"; do
        if [[ -d "$location" ]]; then
            local size_kb=$(du -sk "$location" 2>/dev/null | cut -f1 || echo "0")
            if [[ $size_kb -gt 0 ]]; then
                local size_human=$(du -sh "$location" 2>/dev/null | cut -f1 || echo "unknown")
                found_locations+=("$location")
                total_size=$((total_size + size_kb))

                echo "üìÅ Found backup: $location ($size_human)"

                # Show backup date if available
                if [[ -f "$location/backup_summary.txt" ]]; then
                    local backup_date=$(head -1 "$location/backup_summary.txt" 2>/dev/null | grep -o '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' || echo "unknown")
                    echo "   üìÖ Last backup: $backup_date"
                elif [[ -f "$location/backup/backup_summary.txt" ]]; then
                    local backup_date=$(head -1 "$location/backup/backup_summary.txt" 2>/dev/null | grep -o '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' || echo "unknown")
                    echo "   üìÖ Last backup: $backup_date"
                fi
                echo ""
            fi
        fi
    done

    # Check for custom locations
    echo "üí° If you have backups in other locations, you can specify them manually."
    if ask_yes_no "Do you have backups in a custom location?" "n"; then
        echo -n "Enter the full path to your backup directory: "
        read -r custom_location
        custom_location="${custom_location/#\~/$HOME}"  # Expand tilde

        if [[ -d "$custom_location" ]]; then
            local size_kb=$(du -sk "$custom_location" 2>/dev/null | cut -f1 || echo "0")
            if [[ $size_kb -gt 0 ]]; then
                local size_human=$(du -sh "$custom_location" 2>/dev/null | cut -f1 || echo "unknown")
                found_locations+=("$custom_location")
                total_size=$((total_size + size_kb))
                echo "üìÅ Found custom backup: $custom_location ($size_human)"
                echo ""
            fi
        else
            warn "Custom location not found or empty: $custom_location"
            echo ""
        fi
    fi

    # Show results
    if [[ ${#found_locations[@]} -eq 0 ]]; then
        info "No backup files found to purge."
        echo ""
        echo "Searched locations:"
        for location in "${backup_locations[@]}"; do
            echo "  üìÇ $location"
        done
        return 0
    fi

    # Convert total size to human readable
    local total_size_human
    if [[ $total_size -gt 1048576 ]]; then
        total_size_human="$(echo "scale=1; $total_size / 1048576" | bc)G"
    elif [[ $total_size -gt 1024 ]]; then
        total_size_human="$(echo "scale=1; $total_size / 1024" | bc)M"
    else
        total_size_human="${total_size}K"
    fi

    echo "üìä Summary:"
    echo "   Found ${#found_locations[@]} backup location(s)"
    echo "   Total size: $total_size_human"
    echo ""

    # Show what will be deleted
    echo "This will permanently delete backup files from:"
    for location in "${found_locations[@]}"; do
        echo "  üìÅ $location"
    done
    echo ""

    # Confirm deletion
    warn "This action cannot be undone!"
    echo "üíæ Make sure you have any important data backed up elsewhere."
    echo ""

    if ask_yes_no "Are you sure you want to delete ALL these backup files?" "n"; then
        echo ""
        log "Purging backup files..."

        local failed_deletions=()
        local successful_deletions=0

        for location in "${found_locations[@]}"; do
            echo "üóëÔ∏è  Deleting: $location"
            if rm -rf "$location" 2>/dev/null; then
                echo "‚úÖ Successfully deleted: $location"
                ((successful_deletions++))
            else
                echo "‚ùå Failed to delete: $location"
                failed_deletions+=("$location")
            fi
        done

        echo ""
        if [[ ${#failed_deletions[@]} -eq 0 ]]; then
            echo "‚úÖ All backup files have been successfully purged ($successful_deletions location(s))"
            echo "üí° You can create a new backup with: mac-rebuild backup"
        else
            warn "Some backup files could not be deleted:"
            for failed in "${failed_deletions[@]}"; do
                echo "  ‚ùå $failed"
            done
            echo ""
            echo "You may need to manually delete these directories or check permissions."
            echo "Successfully deleted: $successful_deletions location(s)"
        fi
    else
        echo "Purge cancelled."
    fi
}

# Main command handler
case "${1:-}" in
    backup)
        shift
        cmd_backup "$@"
        ;;
    restore)
        shift
        cmd_restore "$@"
        ;;
    plugins)
        list_plugins
        ;;
    status)
        shift
        cmd_status "$@"
        ;;
    purge)
        cmd_purge
        ;;
    --version|-v)
        echo "Mac Rebuild v${VERSION}"
        ;;
    --help|-h|help)
        show_usage
        ;;
    "")
        show_usage
        ;;
    *)
        error "Unknown command: $1"
        echo ""
        show_usage
        exit 1
        ;;
esac
